+++
# Project title.
title = "GeniaJ"

# Date this page was created.
date = 2019-10-25T00:00:00

# Project summary to display on homepage.
summary = "Java implementation of the Genia tagger."

# Tags: can be used for filtering projects.
# Example: `tags = ["machine-learning", "deep-learning"]`
tags = ["Natural Language Processing", "Ended Project"]

# Optional external URL for project (replaces project detail page).
#external_link = "http://athina.biol.uoa.gr/FT/"

# Slides (optional).
#   Associate this project with Markdown slides.
#   Simply enter your slide deck's filename without extension.
#   E.g. `slides = "example-slides"` references 
#   `content/slides/example-slides.md`.
#   Otherwise, set `slides = ""`.
#slides = "example-slides"

# Links (optional).
url_pdf = ""
url_slides = ""
url_video = ""
url_code = ""

# Custom links (optional).
#   Uncomment line below to enable. For multiple links, use the form `[{...}, {...}, {...}]`.
#links = [{icon_pack = "fab", icon="twitter", name="Follow", url = "https://twitter.com/georgecushen"}]

# Featured image
# To use, add an image named `featured.jpg/png` to your project's folder. 
[image]
  # Caption (optional)
  caption = "Dependency graph of the sentence '*mir1 inhibits gastric cancer cell proliferation and migration by targeting MET*'"
  
  # Focal point (optional)
  # Options: Smart, Center, TopLeft, Top, TopRight, Left, Right, BottomLeft, Bottom, BottomRight
  focal_point = "Smart"
+++

| GeniaJ         |              |
| -------------- | ------------ |
| Release date   | 2010         |
| Implementation | Java         |
| Author         | Pasquier, C. |



GeniaJ [@Pasquier2010] is a Java implementation of the Genia
tagger (Part-of-speech tagging and shallow parsing for biomedical texts)
version 3.0.1 of April 16 2007. The original
version was developped in C++ by Yoshimasa Tsuruoka from the Tsujii
Laboratory at the University of Tokyo] and distributed under the
modified BSD licence. The datasets are identical to the original C++
version. The output from this java version should be identical to the
output of the original C++ version.

For more information about the original software, see:

-   Yoshimasa Tsuruoka, Yuka Tateishi, Jin-Dong Kim, Tomoko Ohta, John
    McNaught, Sophia Ananiadou, and Jun'ichi Tsujii, Developing a Robust
    Part-of-Speech Tagger for Biomedical Text, Advances in Informatics -
    10th Panhellenic Conference on Informatics, LNCS 3746, pp. 382-392, 2005.

#### Execution

Prepare a text file containing one sentence per line, then execute the
program with:

    java -Xmx500m -jar GeniaJ.jar < RAWTEXT > TAGGEDTEXT

The tagger outputs the base forms, part-of-speech (POS) tags, chunk
tags, and named entity (NE) tags in the following tab-separated format.

    word1   base1   POStag1 chunktag1 NEtag1

    word2   base2   POStag2 chunktag2 NEtag2

      :       :        :       :        :

Chunks are represented in the IOB2 format (B for BEGIN, I for INSIDE,
and O for OUTSIDE).

#### Example

    > echo "Inhibition of NF-kappaB activation reversed the anti-apoptotic effect of isochamaejasmin." | java -Xmx500m -jar GeniaJ.jar

    Inhibition      Inhibition      NN      B-NP     O
    of              of              IN      B-PP     O
    NF-kappaB       NF-kappaB       NN      B-NP     B-protein
    activation      activation      NN      I-NP     O
    reversed        reverse         VBD     B-VP     O
    the             the             DT      B-NP     O
    anti-apoptotic  anti-apoptotic  JJ      I-NP     O
    effect          effect          NN      I-NP     O
    of              of              IN      B-PP     O
    isochamaejasmin isochamaejasmin NN      B-NP     O
    .               .               .       O        O

You can easily extract four noun phrases ("Inhibition", "NF-kappaB
activation", "the anti-apoptotic effect", and "isochamaejasmin") from
this output by looking at the chunk tags. You can also find a protein
name with the named entity tags.

#### Related publication

